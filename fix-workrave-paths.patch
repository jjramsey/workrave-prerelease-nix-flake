diff -ru workrave-orig/libs/config/src/GSettingsConfigurator.cc workrave-changed/libs/config/src/GSettingsConfigurator.cc
--- workrave-orig/libs/config/src/GSettingsConfigurator.cc	2025-07-04 21:52:29.558501760 -0400
+++ workrave-changed/libs/config/src/GSettingsConfigurator.cc	2025-07-05 17:41:20.711928240 -0400
@@ -22,6 +22,8 @@
 #include "GSettingsConfigurator.hh"
 #include "IConfiguratorListener.hh"
 
+#include "utils/Exception.hh"
+
 #include <array>
 #include <boost/algorithm/string/replace.hpp>
 
@@ -228,19 +230,38 @@
   TRACE_ENTRY();
   std::size_t len = schema_base.length();
 
+  GSettingsSchemaSource *global_schema_source =
+    g_settings_schema_source_new_from_directory("@workrave_schema_path@",
+                                                g_settings_schema_source_get_default(),
+                                                TRUE, nullptr);
+
   gchar **schemas = nullptr;
-  g_settings_schema_source_list_schemas(g_settings_schema_source_get_default(), TRUE, &schemas, nullptr);
+  g_settings_schema_source_list_schemas(global_schema_source, TRUE, &schemas, nullptr);
 
   for (int i = 0; schemas[i] != nullptr; i++)
     {
       if (g_ascii_strncasecmp(schemas[i], schema_base.c_str(), len) == 0)
         {
-          GSettings *gsettings = g_settings_new(schemas[i]);
+	  GSettingsSchema *schema = g_settings_schema_source_lookup(global_schema_source,
+                                                                    schemas[i], FALSE);
+	  
+          if (schema == nullptr) {
+	    std::string err_msg = "schema for schema id ";
+            err_msg += schemas[i];
+            err_msg += " not found!";
+            
+            TRACE_MSG(err_msg);
+            throw workrave::utils::Exception(err_msg);
+          }
+          
+          GSettings *gsettings = g_settings_new_full(schema, nullptr, nullptr);
 
           settings[schemas[i]] = gsettings;
           g_signal_connect(gsettings, "changed", G_CALLBACK(on_settings_changed), this);
         }
     }
+
+  g_settings_schema_source_unref(global_schema_source);
 }
 
 void
diff -ru workrave-orig/ui/applets/common/src/control.c workrave-changed/ui/applets/common/src/control.c
--- workrave-orig/ui/applets/common/src/control.c	2025-07-04 21:52:29.608499992 -0400
+++ workrave-changed/ui/applets/common/src/control.c	2025-07-05 15:28:32.436938265 -0400
@@ -510,9 +510,21 @@
 workrave_timerbox_control_create_dbus(WorkraveTimerboxControl *self)
 {
   WorkraveTimerboxControlPrivate *priv = workrave_timerbox_control_get_instance_private(self);
-  GSettings *settings = g_settings_new("org.workrave.gui");
+  
+  GSettingsSchemaSource *global_schema_source =
+    g_settings_schema_source_new_from_directory("@workrave_schema_path@",
+                                                g_settings_schema_source_get_default(),
+                                                TRUE, NULL);
+
+  GSettingsSchema *schema = g_settings_schema_source_lookup(global_schema_source,
+                                                            "org.workrave.gui", FALSE);
+  
+  GSettings *settings = g_settings_new_full(schema, NULL, NULL);
   gboolean autostart = g_settings_get_boolean(settings, "autostart");
+  
   g_object_unref(settings);
+  g_settings_schema_unref(schema);
+  g_settings_schema_source_unref(global_schema_source);
 
   GDBusProxyFlags flags = autostart ? 0 : G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
 
diff -ru workrave-orig/ui/applets/common/src/timerbox.c workrave-changed/ui/applets/common/src/timerbox.c
--- workrave-orig/ui/applets/common/src/timerbox.c	2025-07-04 21:52:29.608499992 -0400
+++ workrave-changed/ui/applets/common/src/timerbox.c	2025-07-05 15:30:39.939570018 -0400
@@ -104,13 +104,26 @@
   priv->enabled = FALSE;
   priv->force_icon = FALSE;
   priv->mode = g_strdup("normal");
-  priv->settings = g_settings_new("org.workrave.gui");
+  
+  GSettingsSchemaSource *global_schema_source =
+    g_settings_schema_source_new_from_directory("@workrave_schema_path@",
+                                                g_settings_schema_source_get_default(),
+                                                TRUE, NULL);
+
+  GSettingsSchema *schema = g_settings_schema_source_lookup(global_schema_source,
+                                                            "org.workrave.gui", FALSE);
+  
+  priv->settings = g_settings_new_full(schema, NULL, NULL);
+  
   g_signal_connect(priv->settings, "changed", G_CALLBACK(workrave_on_settings_changed), self);
 
   priv->normal_sheep_icon = NULL;
   priv->quiet_sheep_icon = NULL;
   priv->suspended_sheep_icon = NULL;
 
+  g_settings_schema_unref(schema);
+  g_settings_schema_source_unref(global_schema_source);
+
   workrave_timerbox_init_images(self);
 }
 
diff -ru workrave-orig/ui/applets/gnome-shell-45/src/extension.js workrave-changed/ui/applets/gnome-shell-45/src/extension.js
--- workrave-orig/ui/applets/gnome-shell-45/src/extension.js	2025-07-04 21:52:29.608499992 -0400
+++ workrave-changed/ui/applets/gnome-shell-45/src/extension.js	2025-07-05 15:26:34.253603805 -0400
@@ -11,7 +11,10 @@
   gettext as _,
 } from "resource:///org/gnome/shell/extensions/extension.js";
 
-import Workrave from "gi://Workrave?version=2.0";
+import GIRepository from 'gi://GIRepository';
+
+GIRepository.Repository.prepend_search_path('@workrave_typelib_path@');
+const Workrave = (await import("gi://Workrave?version=2.0")).default;
 
 let start = GLib.get_monotonic_time();
 console.log("workrave-applet: start @ " + start);
diff -ru workrave-orig/ui/applets/indicator/src/indicator-workrave.c workrave-changed/ui/applets/indicator/src/indicator-workrave.c
--- workrave-orig/ui/applets/indicator/src/indicator-workrave.c	2025-07-04 21:52:29.609499956 -0400
+++ workrave-changed/ui/applets/indicator/src/indicator-workrave.c	2025-07-05 15:32:51.471466261 -0400
@@ -462,9 +462,21 @@
 indicator_workrave_create_dbus(IndicatorWorkrave *self)
 {
   IndicatorWorkravePrivate *priv = indicator_workrave_get_instance_private(self);
-  GSettings *settings = g_settings_new("org.workrave.gui");
+  
+  GSettingsSchemaSource *global_schema_source =
+    g_settings_schema_source_new_from_directory("@workrave_schema_path@",
+                                                g_settings_schema_source_get_default(),
+                                                TRUE, NULL);
+
+  GSettingsSchema *schema = g_settings_schema_source_lookup(global_schema_source,
+                                                            "org.workrave.gui", FALSE);
+  
+  GSettings *settings = g_settings_new_full(schema, NULL, NULL);
   gboolean autostart = g_settings_get_boolean(settings, "autostart");
+  
   g_object_unref(settings);
+  g_settings_schema_unref(schema);
+  g_settings_schema_source_unref(global_schema_source);
 
   GDBusProxyFlags flags = autostart ?: G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
 
